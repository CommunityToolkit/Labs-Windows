// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using CommunityToolkit.GeneratedDependencyProperty.Tests.Helpers;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace CommunityToolkit.GeneratedDependencyProperty.Tests;

[TestClass]
public partial class Test_DependencyPropertyGenerator
{
    [TestMethod]
    public void SingleProperty_Int32_WithLocalCache()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(IsLocalCacheEnabled = true)]
                public partial int Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get => field;
                        set
                        {
                            OnNumberSet(ref value);

                            if (global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(field, value))
                            {
                                return;
                            }

                            int __oldValue = field;

                            OnNumberChanging(value);
                            OnNumberChanging(__oldValue, value);

                            field = value;

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                            OnNumberChanged(__oldValue, value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> is changing.</summary>
                    /// <param name="value">The new property value being set.</param>
                    /// <remarks>This method is invoked right before the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanging(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> is changing.</summary>
                    /// <param name="oldValue">The previous property value that is being replaced.</param>
                    /// <param name="newValue">The new property value being set.</param>
                    /// <remarks>This method is invoked right before the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanging(int oldValue, int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="oldValue">The previous property value that has been replaced.</param>
                    /// <param name="newValue">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int oldValue, int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_Int32_WithLocalCache_WithCallback()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(IsLocalCacheEnabled = true)]
                public partial int Number { get; set; }

                partial void OnNumberPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: default(int),
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.Number()));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get => field;
                        set
                        {
                            OnNumberSet(ref value);

                            if (global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(field, value))
                            {
                                return;
                            }

                            int __oldValue = field;

                            OnNumberChanging(value);
                            OnNumberChanging(__oldValue, value);

                            field = value;

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                            OnNumberChanged(__oldValue, value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> is changing.</summary>
                    /// <param name="value">The new property value being set.</param>
                    /// <remarks>This method is invoked right before the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanging(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> is changing.</summary>
                    /// <param name="oldValue">The previous property value that is being replaced.</param>
                    /// <param name="newValue">The new property value being set.</param>
                    /// <remarks>This method is invoked right before the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanging(int oldValue, int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="oldValue">The previous property value that has been replaced.</param>
                    /// <param name="newValue">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int oldValue, int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }

            namespace CommunityToolkit.WinUI.DependencyPropertyGenerator
            {
                using global::System.Runtime.CompilerServices;
                using global::Windows.UI.Xaml;

                /// <summary>
                /// Contains shared property changed callbacks for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedCallbacks
                {
                    /// <summary>Shared <see cref="PropertyChangedCallbacks"/> instance, used to speedup delegate invocations (avoids the shuffle thunks).
                    private static readonly PropertyChangedCallbacks Instance = new();

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.NumberProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback Number()
                    {
                        return new(Instance.OnNumberPropertyChanged);
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnNumberPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnNumberPropertyChanged(__this, e);
                    }
                }

                /// <summary>
                /// Contains all unsafe accessors for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedUnsafeAccessors
                {
                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnNumberPropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnNumberPropertyChanged")]
                    public static extern void OnNumberPropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_Int32_WithLocalCache_WithDefaultValue()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(IsLocalCacheEnabled = true, DefaultValue = 42)]
                public partial int Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(42));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get => field;
                        set
                        {
                            OnNumberSet(ref value);

                            if (global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(field, value))
                            {
                                return;
                            }

                            int __oldValue = field;

                            OnNumberChanging(value);
                            OnNumberChanging(__oldValue, value);

                            field = value;

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                            OnNumberChanged(__oldValue, value);
                        } = 42;
                    }

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> is changing.</summary>
                    /// <param name="value">The new property value being set.</param>
                    /// <remarks>This method is invoked right before the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanging(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> is changing.</summary>
                    /// <param name="oldValue">The previous property value that is being replaced.</param>
                    /// <param name="newValue">The new property value being set.</param>
                    /// <remarks>This method is invoked right before the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanging(int oldValue, int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="oldValue">The previous property value that has been replaced.</param>
                    /// <param name="newValue">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int oldValue, int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_Int32_WithNoCaching()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial int Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            int __unboxedValue = (int)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref int propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_Int32_WithNoCaching_UnsetValue()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(DefaultValue = GeneratedDependencyProperty.UnsetValue)]
                public partial int Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(global::Windows.UI.Xaml.DependencyProperty.UnsetValue));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            int __unboxedValue = (int)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref int propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_Int32_WithNoCaching_WithCallback()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial int Number { get; set; }

                partial void OnNumberPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: default(int),
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.Number()));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            int __unboxedValue = (int)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref int propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }

            namespace CommunityToolkit.WinUI.DependencyPropertyGenerator
            {
                using global::System.Runtime.CompilerServices;
                using global::Windows.UI.Xaml;

                /// <summary>
                /// Contains shared property changed callbacks for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedCallbacks
                {
                    /// <summary>Shared <see cref="PropertyChangedCallbacks"/> instance, used to speedup delegate invocations (avoids the shuffle thunks).
                    private static readonly PropertyChangedCallbacks Instance = new();

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.NumberProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback Number()
                    {
                        return new(Instance.OnNumberPropertyChanged);
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnNumberPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnNumberPropertyChanged(__this, e);
                    }
                }

                /// <summary>
                /// Contains all unsafe accessors for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedUnsafeAccessors
                {
                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnNumberPropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnNumberPropertyChanged")]
                    public static extern void OnNumberPropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_Int32_WithNoCaching_WithDefaultValue()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(DefaultValue = 42)]
                public partial int Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(42));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            int __unboxedValue = (int)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref int propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_Int32_WithNoCaching_WithDefaultValue_WithCallback()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(DefaultValue = 42)]
                public partial int Number { get; set; }

                partial void OnNumberPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: 42,
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.Number()));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            int __unboxedValue = (int)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref int propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }

            namespace CommunityToolkit.WinUI.DependencyPropertyGenerator
            {
                using global::System.Runtime.CompilerServices;
                using global::Windows.UI.Xaml;

                /// <summary>
                /// Contains shared property changed callbacks for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedCallbacks
                {
                    /// <summary>Shared <see cref="PropertyChangedCallbacks"/> instance, used to speedup delegate invocations (avoids the shuffle thunks).
                    private static readonly PropertyChangedCallbacks Instance = new();

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.NumberProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback Number()
                    {
                        return new(Instance.OnNumberPropertyChanged);
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnNumberPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnNumberPropertyChanged(__this, e);
                    }
                }

                /// <summary>
                /// Contains all unsafe accessors for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedUnsafeAccessors
                {
                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnNumberPropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnNumberPropertyChanged")]
                    public static extern void OnNumberPropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_Int32_WithNoCaching_WithSharedCallback()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial int Number { get; set; }

                partial void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: default(int),
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.Number()));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            int __unboxedValue = (int)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref int propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }

            namespace CommunityToolkit.WinUI.DependencyPropertyGenerator
            {
                using global::System.Runtime.CompilerServices;
                using global::Windows.UI.Xaml;

                /// <summary>
                /// Contains shared property changed callbacks for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedCallbacks
                {
                    /// <summary>Shared <see cref="PropertyChangedCallbacks"/> instance, used to speedup delegate invocations (avoids the shuffle thunks).
                    private static readonly PropertyChangedCallbacks Instance = new();

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.NumberProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback Number()
                    {
                        return new(Instance.OnPropertyChanged);
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnPropertyChanged(__this, e);
                    }
                }

                /// <summary>
                /// Contains all unsafe accessors for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedUnsafeAccessors
                {
                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnPropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnPropertyChanged")]
                    public static extern void OnPropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_Int32_WithNoCaching_WithBothCallbacks()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial int Number { get; set; }

                partial void OnNumberPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }

                partial void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: default(int),
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.Number()));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            int __unboxedValue = (int)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref int propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }

            namespace CommunityToolkit.WinUI.DependencyPropertyGenerator
            {
                using global::System.Runtime.CompilerServices;
                using global::Windows.UI.Xaml;

                /// <summary>
                /// Contains shared property changed callbacks for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedCallbacks
                {
                    /// <summary>Shared <see cref="PropertyChangedCallbacks"/> instance, used to speedup delegate invocations (avoids the shuffle thunks).
                    private static readonly PropertyChangedCallbacks Instance = new();

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.NumberProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback Number()
                    {
                        return new(Instance.OnNumberPropertyChanged);
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnNumberPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnNumberPropertyChanged(__this, e);
                        PropertyChangedUnsafeAccessors.OnPropertyChanged(__this, e);
                    }
                }

                /// <summary>
                /// Contains all unsafe accessors for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedUnsafeAccessors
                {
                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnNumberPropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnNumberPropertyChanged")]
                    public static extern void OnNumberPropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);

                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnPropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnPropertyChanged")]
                    public static extern void OnPropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_String_WithLocalCache()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(IsLocalCacheEnabled = true)]
                public partial string? Name { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Name"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Name",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? Name
                    {
                        get => field;
                        set
                        {
                            OnNameSet(ref value);

                            if (global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(field, value))
                            {
                                return;
                            }

                            string? __oldValue = field;

                            OnNameChanging(value);
                            OnNameChanging(__oldValue, value);

                            field = value;

                            object? __boxedValue = value;

                            OnNameSet(ref __boxedValue);

                            SetValue(NameProperty, __boxedValue);

                            OnNameChanged(value);
                            OnNameChanged(__oldValue, value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Name"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Name"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> is changing.</summary>
                    /// <param name="value">The new property value being set.</param>
                    /// <remarks>This method is invoked right before the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanging(string? newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> is changing.</summary>
                    /// <param name="oldValue">The previous property value that is being replaced.</param>
                    /// <param name="newValue">The new property value being set.</param>
                    /// <remarks>This method is invoked right before the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanging(string? oldValue, string? newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="oldValue">The previous property value that has been replaced.</param>
                    /// <param name="newValue">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged(string? oldValue, string? newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_String_WithNoCaching()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial string? Name { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Name"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Name",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? Name
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NameProperty);

                            OnNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNameSet(ref value);

                            object? __boxedValue = value;

                            OnNameSet(ref __boxedValue);

                            SetValue(NameProperty, __boxedValue);

                            OnNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Name"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Name"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_String_WithNoCaching_Required()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public required partial string Name { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Name"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Name",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public required partial string Name
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NameProperty);

                            OnNameGet(ref __boxedValue);

                            string __unboxedValue = (string)__boxedValue;

                            OnNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNameSet(ref value);

                            object? __boxedValue = value;

                            OnNameSet(ref __boxedValue);

                            SetValue(NameProperty, __boxedValue);

                            OnNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref string propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Name"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Name"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref string propertyValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged(string newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_String_WithNoCaching_New()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public class BaseControl : DependencyObject
            {
                public new string Name { get; set; }
            }

            public partial class MyControl : BaseControl
            {
                [GeneratedDependencyProperty]
                public new partial string Name { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Name"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Name",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public new partial string Name
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NameProperty);

                            OnNameGet(ref __boxedValue);

                            string __unboxedValue = (string)__boxedValue;

                            OnNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNameSet(ref value);

                            object? __boxedValue = value;

                            OnNameSet(ref __boxedValue);

                            SetValue(NameProperty, __boxedValue);

                            OnNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref string propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Name"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Name"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref string propertyValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged(string newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_String_WithNoCaching_Virtual()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public virtual partial string Name { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Name"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Name",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public virtual partial string Name
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NameProperty);

                            OnNameGet(ref __boxedValue);

                            string __unboxedValue = (string)__boxedValue;

                            OnNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNameSet(ref value);

                            object? __boxedValue = value;

                            OnNameSet(ref __boxedValue);

                            SetValue(NameProperty, __boxedValue);

                            OnNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref string propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Name"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Name"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref string propertyValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged(string newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    [DataRow("override")]
    [DataRow("sealed override")]
    public void SingleProperty_String_WithNoCaching_Override(string modifiers)
    {
        string source = $$"""
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public class BaseControl : DependencyObject
            {
                public virtual string Name { get; set; }
            }

            public partial class MyControl : BaseControl
            {
                [GeneratedDependencyProperty]
                public {{modifiers}} partial string Name { get; set; }
            }
            """;

        string result = $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Name"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Name",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public {{modifiers}} partial string Name
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NameProperty);

                            OnNameGet(ref __boxedValue);

                            string __unboxedValue = (string)__boxedValue;

                            OnNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNameSet(ref value);

                            object? __boxedValue = value;

                            OnNameSet(ref __boxedValue);

                            SetValue(NameProperty, __boxedValue);

                            OnNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref string propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Name"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Name"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref string propertyValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged(string newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_String_WithNoCaching_CustomAccessibility()
    {
        string source = $$"""
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                internal partial string Name { protected get; private set; }
            }
            """;

        string result = $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Name"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Name",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    internal partial string Name
                    {
                        protected get
                        {
                            object? __boxedValue = GetValue(NameProperty);

                            OnNameGet(ref __boxedValue);

                            string __unboxedValue = (string)__boxedValue;

                            OnNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        private set
                        {
                            OnNameSet(ref value);

                            object? __boxedValue = value;

                            OnNameSet(ref __boxedValue);

                            SetValue(NameProperty, __boxedValue);

                            OnNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref string propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Name"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Name"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref string propertyValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged(string newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void MultipleProperties_WithNoCaching_CorrectSpacing()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial string? FirstName { get; set; }

                [GeneratedDependencyProperty]
                public partial string? LastName { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="FirstName"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty FirstNameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "FirstName",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="LastName"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty LastNameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "LastName",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? FirstName
                    {
                        get
                        {
                            object? __boxedValue = GetValue(FirstNameProperty);

                            OnFirstNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnFirstNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnFirstNameSet(ref value);

                            object? __boxedValue = value;

                            OnFirstNameSet(ref __boxedValue);

                            SetValue(FirstNameProperty, __boxedValue);

                            OnFirstNameChanged(value);
                        }
                    }

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? LastName
                    {
                        get
                        {
                            object? __boxedValue = GetValue(LastNameProperty);

                            OnLastNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnLastNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnLastNameSet(ref value);

                            object? __boxedValue = value;

                            OnLastNameSet(ref __boxedValue);

                            SetValue(LastNameProperty, __boxedValue);

                            OnLastNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="FirstName"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="FirstName"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="FirstName"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="FirstName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="FirstName"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="FirstName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="LastName"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="LastName"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="LastName"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="LastName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="LastName"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="LastName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void MultipleProperties_WithNoCaching_WithJustOnePropertyCallback()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial string? FirstName { get; set; }

                [GeneratedDependencyProperty]
                public partial string? LastName { get; set; }

                partial void OnFirstNamePropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="FirstName"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty FirstNameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "FirstName",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: null,
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.FirstName()));

                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="LastName"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty LastNameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "LastName",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? FirstName
                    {
                        get
                        {
                            object? __boxedValue = GetValue(FirstNameProperty);

                            OnFirstNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnFirstNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnFirstNameSet(ref value);

                            object? __boxedValue = value;

                            OnFirstNameSet(ref __boxedValue);

                            SetValue(FirstNameProperty, __boxedValue);

                            OnFirstNameChanged(value);
                        }
                    }

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? LastName
                    {
                        get
                        {
                            object? __boxedValue = GetValue(LastNameProperty);

                            OnLastNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnLastNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnLastNameSet(ref value);

                            object? __boxedValue = value;

                            OnLastNameSet(ref __boxedValue);

                            SetValue(LastNameProperty, __boxedValue);

                            OnLastNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="FirstName"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="FirstName"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="FirstName"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="FirstName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="FirstName"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="FirstName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="LastName"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="LastName"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="LastName"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="LastName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="LastName"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="LastName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }

            namespace CommunityToolkit.WinUI.DependencyPropertyGenerator
            {
                using global::System.Runtime.CompilerServices;
                using global::Windows.UI.Xaml;

                /// <summary>
                /// Contains shared property changed callbacks for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedCallbacks
                {
                    /// <summary>Shared <see cref="PropertyChangedCallbacks"/> instance, used to speedup delegate invocations (avoids the shuffle thunks).
                    private static readonly PropertyChangedCallbacks Instance = new();

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.FirstNameProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback FirstName()
                    {
                        return new(Instance.OnFirstNamePropertyChanged);
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnFirstNamePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnFirstNamePropertyChanged(__this, e);
                    }
                }

                /// <summary>
                /// Contains all unsafe accessors for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedUnsafeAccessors
                {
                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnFirstNamePropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnFirstNamePropertyChanged")]
                    public static extern void OnFirstNamePropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void MultipleProperties_WithNoCaching_WithSharedPropertyCallback()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial string? FirstName { get; set; }

                [GeneratedDependencyProperty]
                public partial string? LastName { get; set; }

                partial void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="FirstName"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty FirstNameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "FirstName",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: null,
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.FirstName()));

                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="LastName"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty LastNameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "LastName",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: null,
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.LastName()));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? FirstName
                    {
                        get
                        {
                            object? __boxedValue = GetValue(FirstNameProperty);

                            OnFirstNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnFirstNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnFirstNameSet(ref value);

                            object? __boxedValue = value;

                            OnFirstNameSet(ref __boxedValue);

                            SetValue(FirstNameProperty, __boxedValue);

                            OnFirstNameChanged(value);
                        }
                    }

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? LastName
                    {
                        get
                        {
                            object? __boxedValue = GetValue(LastNameProperty);

                            OnLastNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnLastNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnLastNameSet(ref value);

                            object? __boxedValue = value;

                            OnLastNameSet(ref __boxedValue);

                            SetValue(LastNameProperty, __boxedValue);

                            OnLastNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="FirstName"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="FirstName"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="FirstName"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="FirstName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="FirstName"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="FirstName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="LastName"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="LastName"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="LastName"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="LastName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="LastName"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="LastName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }

            namespace CommunityToolkit.WinUI.DependencyPropertyGenerator
            {
                using global::System.Runtime.CompilerServices;
                using global::Windows.UI.Xaml;

                /// <summary>
                /// Contains shared property changed callbacks for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedCallbacks
                {
                    /// <summary>Shared <see cref="PropertyChangedCallbacks"/> instance, used to speedup delegate invocations (avoids the shuffle thunks).
                    private static readonly PropertyChangedCallbacks Instance = new();

                    /// <summary>Shared <see cref="PropertyChangedCallback"/> instance, for all properties only using the shared callback.
                    private static readonly PropertyChangedCallback SharedPropertyChangedCallback = new(Instance.OnPropertyChanged);

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.FirstNameProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback FirstName()
                    {
                        return SharedPropertyChangedCallback;
                    }

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.LastNameProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback LastName()
                    {
                        return SharedPropertyChangedCallback;
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnPropertyChanged(__this, e);
                    }
                }

                /// <summary>
                /// Contains all unsafe accessors for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedUnsafeAccessors
                {
                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnPropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnPropertyChanged")]
                    public static extern void OnPropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void MultipleProperties_WithNoCaching_WithMixedPropertyCallbacks()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial string? FirstName { get; set; }

                [GeneratedDependencyProperty]
                public partial string? LastName { get; set; }

                partial void OnFirstNamePropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }

                partial void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="FirstName"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty FirstNameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "FirstName",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: null,
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.FirstName()));

                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="LastName"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty LastNameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "LastName",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: null,
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.LastName()));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? FirstName
                    {
                        get
                        {
                            object? __boxedValue = GetValue(FirstNameProperty);

                            OnFirstNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnFirstNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnFirstNameSet(ref value);

                            object? __boxedValue = value;

                            OnFirstNameSet(ref __boxedValue);

                            SetValue(FirstNameProperty, __boxedValue);

                            OnFirstNameChanged(value);
                        }
                    }

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? LastName
                    {
                        get
                        {
                            object? __boxedValue = GetValue(LastNameProperty);

                            OnLastNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnLastNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnLastNameSet(ref value);

                            object? __boxedValue = value;

                            OnLastNameSet(ref __boxedValue);

                            SetValue(LastNameProperty, __boxedValue);

                            OnLastNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="FirstName"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="FirstName"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="FirstName"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="FirstName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="FirstName"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="FirstName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="LastName"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="LastName"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="LastName"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="LastName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="LastName"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="LastName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }

            namespace CommunityToolkit.WinUI.DependencyPropertyGenerator
            {
                using global::System.Runtime.CompilerServices;
                using global::Windows.UI.Xaml;

                /// <summary>
                /// Contains shared property changed callbacks for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedCallbacks
                {
                    /// <summary>Shared <see cref="PropertyChangedCallbacks"/> instance, used to speedup delegate invocations (avoids the shuffle thunks).
                    private static readonly PropertyChangedCallbacks Instance = new();

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.FirstNameProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback FirstName()
                    {
                        return new(Instance.OnFirstNamePropertyChanged);
                    }

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.LastNameProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback LastName()
                    {
                        return new(Instance.OnPropertyChanged);
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnFirstNamePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnFirstNamePropertyChanged(__this, e);
                        PropertyChangedUnsafeAccessors.OnPropertyChanged(__this, e);
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnPropertyChanged(__this, e);
                    }
                }

                /// <summary>
                /// Contains all unsafe accessors for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedUnsafeAccessors
                {
                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnFirstNamePropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnFirstNamePropertyChanged")]
                    public static extern void OnFirstNamePropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);

                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnPropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnPropertyChanged")]
                    public static extern void OnPropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void MultipleProperties_WithNoCaching_WithMixedPropertyCallbacks2()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial string? FirstName { get; set; }

                [GeneratedDependencyProperty]
                public partial string? LastName { get; set; }

                partial void OnFirstNamePropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }

                partial void OnLastNamePropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }

                partial void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="FirstName"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty FirstNameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "FirstName",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: null,
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.FirstName()));

                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="LastName"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty LastNameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "LastName",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: null,
                            propertyChangedCallback: global::CommunityToolkit.WinUI.DependencyPropertyGenerator.PropertyChangedCallbacks.LastName()));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? FirstName
                    {
                        get
                        {
                            object? __boxedValue = GetValue(FirstNameProperty);

                            OnFirstNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnFirstNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnFirstNameSet(ref value);

                            object? __boxedValue = value;

                            OnFirstNameSet(ref __boxedValue);

                            SetValue(FirstNameProperty, __boxedValue);

                            OnFirstNameChanged(value);
                        }
                    }

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? LastName
                    {
                        get
                        {
                            object? __boxedValue = GetValue(LastNameProperty);

                            OnLastNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnLastNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnLastNameSet(ref value);

                            object? __boxedValue = value;

                            OnLastNameSet(ref __boxedValue);

                            SetValue(LastNameProperty, __boxedValue);

                            OnLastNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="FirstNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="FirstNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="FirstName"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="FirstName"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="FirstName"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="FirstName"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="FirstName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="FirstName"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="FirstName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnFirstNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="LastNameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="LastNameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="LastName"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="LastName"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="LastName"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="LastName"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="LastName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="LastName"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="LastName"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnLastNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }

            namespace CommunityToolkit.WinUI.DependencyPropertyGenerator
            {
                using global::System.Runtime.CompilerServices;
                using global::Windows.UI.Xaml;

                /// <summary>
                /// Contains shared property changed callbacks for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedCallbacks
                {
                    /// <summary>Shared <see cref="PropertyChangedCallbacks"/> instance, used to speedup delegate invocations (avoids the shuffle thunks).
                    private static readonly PropertyChangedCallbacks Instance = new();

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.FirstNameProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback FirstName()
                    {
                        return new(Instance.OnFirstNamePropertyChanged);
                    }

                    /// <summary>
                    /// Gets a <see cref="PropertyChangedCallback"/> value for <see cref="global::MyNamespace.MyControl.LastNameProperty"/>.
                    /// </summary>
                    /// <returns>The <see cref="PropertyChangedCallback"/> value with the right callbacks.</returns>
                    public static PropertyChangedCallback LastName()
                    {
                        return new(Instance.OnLastNamePropertyChanged);
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnFirstNamePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnFirstNamePropertyChanged(__this, e);
                        PropertyChangedUnsafeAccessors.OnPropertyChanged(__this, e);
                    }

                    /// <inheritdoc cref="cref="global::MyNamespace.MyControl.OnPropertyChanged""/>
                    private void OnLastNamePropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
                    {
                        global::MyNamespace.MyControl __this = (global::MyNamespace.MyControl)d;

                        PropertyChangedUnsafeAccessors.OnLastNamePropertyChanged(__this, e);
                        PropertyChangedUnsafeAccessors.OnPropertyChanged(__this, e);
                    }
                }

                /// <summary>
                /// Contains all unsafe accessors for <see cref="MyControl"/>.
                /// </summary>
                [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                [global::System.Diagnostics.DebuggerNonUserCode]
                [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                file sealed class PropertyChangedUnsafeAccessors
                {
                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnFirstNamePropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnFirstNamePropertyChanged")]
                    public static extern void OnFirstNamePropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);

                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnLastNamePropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnLastNamePropertyChanged")]
                    public static extern void OnLastNamePropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);

                    /// <inheritdoc cref="global::MyNamespace.MyControl.OnPropertyChanged"/>
                    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = "OnPropertyChanged")]
                    public static extern void OnPropertyChanged(global::MyNamespace.MyControl _, DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    [DataRow("int")]
    [DataRow("object")]
    [DataRow("object?")]
    public void SingleProperty_Int32_WithNoCaching_WithDefaultValueCallback(string returnType)
    {
        string source = $$"""
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(DefaultValueCallback = nameof(CreateNumber))]
                public partial int Number { get; set; }

                private static {{returnType}} CreateNumber() => 42;
            }
            """;

        string result = $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int),
                        ownerType: typeof(MyControl),
                        typeMetadata: global::Windows.UI.Xaml.PropertyMetadata.Create(
                            createDefaultValueCallback: new Windows.UI.Xaml.CreateDefaultValueCallback(CreateNumber)));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            int __unboxedValue = (int)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref int propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.CSharp13);
    }

    [TestMethod]
    [DataRow("int")]
    [DataRow("int?")]
    [DataRow("object")]
    [DataRow("object?")]
    public void SingleProperty_NullableOfInt32_WithNoCaching_WithDefaultValueCallback(string returnType)
    {
        string source = $$"""
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(DefaultValueCallback = nameof(CreateNumber))]
                public partial int? Number { get; set; }

                private static {{returnType}} CreateNumber() => 42;
            }
            """;

        string result = $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(int?),
                        ownerType: typeof(MyControl),
                        typeMetadata: global::Windows.UI.Xaml.PropertyMetadata.Create(
                            createDefaultValueCallback: new Windows.UI.Xaml.CreateDefaultValueCallback(CreateNumber)));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial int? Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            int? __unboxedValue = (int?)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref int? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref int? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(int? newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.CSharp13);
    }

    [TestMethod]
    [DataRow("string")]
    [DataRow("string?")]
    [DataRow("object")]
    [DataRow("object?")]
    public void SingleProperty_String_WithNoCaching_WithDefaultValueCallback(string returnType)
    {
        string source = $$"""
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(DefaultValueCallback = nameof(CreateName))]
                public partial string? Name { get; set; }

                private static {{returnType}} CreateName() => "Bob";
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Name"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Name",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: global::Windows.UI.Xaml.PropertyMetadata.Create(
                            createDefaultValueCallback: new Windows.UI.Xaml.CreateDefaultValueCallback(CreateName)));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? Name
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NameProperty);

                            OnNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNameSet(ref value);

                            object? __boxedValue = value;

                            OnNameSet(ref __boxedValue);

                            SetValue(NameProperty, __boxedValue);

                            OnNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Name"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Name"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.CSharp13);
    }

    [TestMethod]

    // The 'string' type is special
    [DataRow("string", "string", "object", "null")]
    [DataRow("string", "string?", "object?", "null")]

    // Well known WinRT primitive types
    [DataRow("int", "int", "object", "null")]
    [DataRow("byte", "byte", "object", "null")]
    [DataRow("sbyte", "sbyte", "object", "null")]
    [DataRow("short", "short", "object", "null")]
    [DataRow("ushort", "ushort", "object", "null")]
    [DataRow("uint", "uint", "object", "null")]
    [DataRow("long", "long", "object", "null")]
    [DataRow("ulong", "ulong", "object", "null")]
    [DataRow("char", "char", "object", "null")]
    [DataRow("float", "float", "object", "null")]
    [DataRow("double", "double", "object", "null")]

    // Well known WinRT struct types
    [DataRow("global::System.Numerics.Matrix3x2", "global::System.Numerics.Matrix3x2", "object", "null")]
    [DataRow("global::System.Numerics.Matrix4x4", "global::System.Numerics.Matrix4x4", "object", "null")]
    [DataRow("global::System.Numerics.Plane", "global::System.Numerics.Plane", "object", "null")]
    [DataRow("global::System.Numerics.Quaternion", "global::System.Numerics.Quaternion", "object", "null")]
    [DataRow("global::System.Numerics.Vector2", "global::System.Numerics.Vector2", "object", "null")]
    [DataRow("global::System.Numerics.Vector3", "global::System.Numerics.Vector3", "object", "null")]
    [DataRow("global::System.Numerics.Vector4", "global::System.Numerics.Vector4", "object", "null")]
    [DataRow("global::Windows.Foundation.Point", "global::Windows.Foundation.Point", "object", "null")]
    [DataRow("global::Windows.Foundation.Rect", "global::Windows.Foundation.Rect", "object", "null")]
    [DataRow("global::Windows.Foundation.Size", "global::Windows.Foundation.Size", "object", "null")]
    [DataRow("global::System.TimeSpan", "global::System.TimeSpan", "object", "null")]
    [DataRow("global::System.DateTimeOffset", "global::System.DateTimeOffset", "object", "null")]

    // Well known WinRT enum types
    [DataRow("global::Windows.UI.Xaml.Visibility", "global::Windows.UI.Xaml.Visibility", "object", "null")]

    // Nullable types, they're always just 'null'
    [DataRow("int?", "int?", "object?", "null")]
    [DataRow("byte?", "byte?", "object?", "null")]
    [DataRow("char?", "char?", "object?", "null")]
    [DataRow("long?", "long?", "object?", "null")]
    [DataRow("float?", "float?", "object?", "null")]
    [DataRow("double?", "double?", "object?", "null")]
    [DataRow("global::System.DateTimeOffset?", "global::System.DateTimeOffset?", "object?", "null")]
    [DataRow("global::System.TimeSpan?", "global::System.TimeSpan?", "object?", "null")]
    [DataRow("global::System.Guid?", "global::System.Guid?", "object?", "null")]
    [DataRow("global::System.Collections.Generic.KeyValuePair<int, float>?", "global::System.Collections.Generic.KeyValuePair<int, float>?", "object?", "null")]

    // Custom struct types
    [DataRow("global::MyNamespace.MyStruct", "global::MyNamespace.MyStruct", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(global::MyNamespace.MyStruct))", "public struct MyStruct { public int X; }")]
    [DataRow("global::MyNamespace.MyStruct", "global::MyNamespace.MyStruct", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(global::MyNamespace.MyStruct))", "public struct MyStruct { public string X { get; set; } }")]

    // Custom enum types
    [DataRow("global::MyNamespace.MyEnum", "global::MyNamespace.MyEnum", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(global::MyNamespace.MyEnum))", "public enum MyEnum { A, B, C }")]
    public void SingleProperty_MultipleTypes_WithNoCaching_DefaultValueIsOptimized(
        string dependencyPropertyType,
        string propertyType,
        string defaultValueDefinition,
        string propertyMetadataExpression,
        string? typeDefinition = "")
    {
        string source = $$"""
            using System;
            using System.Collections.Generic;
            using CommunityToolkit.WinUI;
            using Windows.Foundation;
            using Windows.Foundation.Numerics;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            {{typeDefinition}}

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial {{propertyType}} Name { get; set; }
            }
            """;

        string result = $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Name"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Name",
                        propertyType: typeof({{dependencyPropertyType}}),
                        ownerType: typeof(MyControl),
                        typeMetadata: {{propertyMetadataExpression}});

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial {{propertyType}} Name
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NameProperty);

                            OnNameGet(ref __boxedValue);

                            {{propertyType}} __unboxedValue = ({{propertyType}})__boxedValue;

                            OnNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNameSet(ref value);

                            object? __boxedValue = value;

                            OnNameSet(ref __boxedValue);

                            SetValue(NameProperty, __boxedValue);

                            OnNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref {{defaultValueDefinition}} propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref {{propertyType}} propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref {{defaultValueDefinition}} propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Name"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Name"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref {{propertyType}} propertyValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged({{propertyType}} newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.CSharp13);
    }

    [TestMethod]
    [DataRow("A", "global::MyNamespace.AAttribute()")]
    [DataRow("B(42, 10)", "global::MyNamespace.BAttribute(42, 10)")]
    [DataRow("B(X: 42, Y: 10)", "global::MyNamespace.BAttribute(X: 42, Y: 10)")]
    [DataRow("B(Y: 42, X: 10)", "global::MyNamespace.BAttribute(Y: 42, X: 10)")]
    [DataRow("B(42, Y: 10)", "global::MyNamespace.BAttribute(42, Y: 10)")]
    [DataRow("""C(10, X = "Test", Y = 42)""", """global::MyNamespace.CAttribute(10, X = "Test", Y = 42)""")]
    [DataRow("""C(Z: 10, X = "Test", Y = 42)""", """global::MyNamespace.CAttribute(Z: 10, X = "Test", Y = 42)""")]
    [DataRow("D(Foo.B, typeof(string), new[] { 1, 2, 3 })", "global::MyNamespace.DAttribute(global::MyNamespace.Foo.B, typeof(string), new int[] { 1, 2, 3 })")]
    [DataRow("D(Foo.B, typeof(string), new int[] { 1, 2, 3 })", "global::MyNamespace.DAttribute(global::MyNamespace.Foo.B, typeof(string), new int[] { 1, 2, 3 })")]
    [DataRow("D(Foo.B, typeof(string), [1, 2, 3])", "global::MyNamespace.DAttribute(global::MyNamespace.Foo.B, typeof(string), new int[] { 1, 2, 3 })")]
    [DataRow("""E(42, Y: 10, Z: "Bob", W = 100)""", """global::MyNamespace.EAttribute(42, Y: 10, Z: "Bob", W = 100)""")]
    public void SingleProperty_String_WithNoCaching_WithForwardedAttribute(
        string attributeDefinition,
        string attributeForwarding)
    {
        string source = $$"""
            using System;
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                [static: {{attributeDefinition}}]
                public partial string? Name { get; set; }
            }

            public class AAttribute : Attribute;
            public class BAttribute(int X, int Y) : Attribute;
            public class CAttribute(int Z) : Attribute
            {
                public string X { get; set; }
                public int Y { get; set; }
            }
            public class DAttribute(Foo X, Type Y, int[] Z) : Attribute;
            public class EAttribute(int X, int Y, string Z) : Attribute
            {
                public int W { get; set; }
            }
            public enum Foo { A, B }
            """;

        string result = $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Name"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [{{attributeForwarding}}]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NameProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Name",
                        propertyType: typeof(string),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? Name
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NameProperty);

                            OnNameGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnNameGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNameSet(ref value);

                            object? __boxedValue = value;

                            OnNameSet(ref __boxedValue);

                            SetValue(NameProperty, __boxedValue);

                            OnNameChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NameProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NameProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Name"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Name"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Name"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNameChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="Name"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Name"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNamePropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_Bool_WithNoCaching()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty]
                public partial bool IsSelected { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="IsSelected"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty IsSelectedProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "IsSelected",
                        propertyType: typeof(bool),
                        ownerType: typeof(MyControl),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial bool IsSelected
                    {
                        get
                        {
                            object? __boxedValue = GetValue(IsSelectedProperty);

                            OnIsSelectedGet(ref __boxedValue);

                            bool __unboxedValue = (bool)__boxedValue;

                            OnIsSelectedGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnIsSelectedSet(ref value);

                            object? __boxedValue = value;

                            OnIsSelectedSet(ref __boxedValue);

                            SetValue(IsSelectedProperty, __boxedValue);

                            OnIsSelectedChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="IsSelectedProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="IsSelectedProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="IsSelectedProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="IsSelectedProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedGet(ref bool propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="IsSelectedProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="IsSelectedProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="IsSelected"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="IsSelected"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedSet(ref bool propertyValue);

                    /// <summary>Executes the logic for when <see cref="IsSelected"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="IsSelected"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedChanged(bool newValue);

                    /// <summary>Executes the logic for when <see cref="IsSelected"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="IsSelected"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    [DataRow("bool", "bool", "null", "bool", "object", "null")]
    [DataRow("bool", "bool", "bool", "bool", "object", "null")]
    [DataRow("bool", "bool", "object", "object", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(bool))")]
    [DataRow("bool?", "bool?", "null", "bool?", "object?", "null")]
    [DataRow("bool?", "bool?", "bool?", "bool?", "object?", "null")]
    [DataRow("bool?", "bool?", "object", "object", "object?", "null")]
    [DataRow("bool?", "bool?", "bool", "bool", "object?", "new global::Windows.UI.Xaml.PropertyMetadata(null)")]
    [DataRow("string?", "string?", "null", "string", "object?", "null")]
    [DataRow("string?", "string?", "string", "string", "object?", "null")]
    [DataRow("string?", "string?", "object", "object", "object?", "null")]
    [DataRow("Visibility", "global::Windows.UI.Xaml.Visibility", "object", "object", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(global::Windows.UI.Xaml.Visibility))")]
    [DataRow("Visibility?", "global::Windows.UI.Xaml.Visibility?", "object", "object", "object?", "null")]
    public void SingleProperty_WithCustomMetadataType_WithNoCaching(
        string declaredType,
        string generatedDeclaredType,
        string propertyType,
        string generatedPropertyType,
        string boxedType,
        string propertyMetadata)
    {
        string source = $$"""
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyControl : DependencyObject
            {
                [GeneratedDependencyProperty(PropertyType = typeof({{propertyType}}))]
                public partial {{declaredType}} IsSelected { get; set; }
            }
            """;

        string result = $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyControl"/>
                partial class MyControl
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="IsSelected"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty IsSelectedProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "IsSelected",
                        propertyType: typeof({{generatedPropertyType}}),
                        ownerType: typeof(MyControl),
                        typeMetadata: {{propertyMetadata}});

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial {{generatedDeclaredType}} IsSelected
                    {
                        get
                        {
                            object? __boxedValue = GetValue(IsSelectedProperty);

                            OnIsSelectedGet(ref __boxedValue);

                            {{generatedDeclaredType}} __unboxedValue = ({{generatedDeclaredType}})__boxedValue;

                            OnIsSelectedGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnIsSelectedSet(ref value);

                            object? __boxedValue = value;

                            OnIsSelectedSet(ref __boxedValue);

                            SetValue(IsSelectedProperty, __boxedValue);

                            OnIsSelectedChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="IsSelectedProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="IsSelectedProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedGet(ref {{boxedType}} propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="IsSelectedProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="IsSelectedProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedGet(ref {{generatedDeclaredType}} propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="IsSelectedProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="IsSelectedProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedSet(ref {{boxedType}} propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="IsSelected"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="IsSelected"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedSet(ref {{generatedDeclaredType}} propertyValue);

                    /// <summary>Executes the logic for when <see cref="IsSelected"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="IsSelected"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedChanged({{generatedDeclaredType}} newValue);

                    /// <summary>Executes the logic for when <see cref="IsSelected"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="IsSelected"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyControl.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    [DataRow("T1", "null", "T1", "object", "null")]
    [DataRow("T1", "T1", "T1", "object", "null")]
    [DataRow("T1", "object", "object", "object", "null")]
    [DataRow("T1?", "null", "T1", "object?", "null")]
    [DataRow("T1?", "T1", "T1", "object?", "null")]
    [DataRow("T1?", "object", "object", "object?", "null")]
    [DataRow("T2", "null", "T2", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(T2))")]
    [DataRow("T2", "T2", "T2", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(T2))")]
    [DataRow("T2", "object", "object", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(T2))")]
    [DataRow("T2?", "null", "T2", "object?", "new global::Windows.UI.Xaml.PropertyMetadata(default(T2))")]
    [DataRow("T2?", "T2", "T2", "object?", "new global::Windows.UI.Xaml.PropertyMetadata(default(T2))")]
    [DataRow("T2?", "object", "object", "object?", "new global::Windows.UI.Xaml.PropertyMetadata(default(T2))")]
    [DataRow("T3", "null", "T3", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(T3))")]
    [DataRow("T3", "T3", "T3", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(T3))")]
    [DataRow("T3", "object", "object", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(T3))")]
    [DataRow("T4", "null", "T4", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(T4))")]
    [DataRow("T4", "T4", "T4", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(T4))")]
    [DataRow("T4", "object", "object", "object", "new global::Windows.UI.Xaml.PropertyMetadata(default(T4))")]
    [DataRow("T4?", "null", "T4?", "object?", "null")]
    [DataRow("T4?", "T4?", "T4?", "object?", "null")]
    [DataRow("T4?", "object", "object", "object?", "null")]
    public void SingleProperty_GenericType_WithCustomMetadataType_WithNoCaching(
        string declaredType,
        string propertyType,
        string generatedPropertyType,
        string boxedType,
        string propertyMetadata)
    {
        string source = $$"""
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyObject<T1, T2, T3, T4> : DependencyObject
                where T1 : class
                where T3 : T2, new()
                where T4 : unmanaged
            {
                [GeneratedDependencyProperty(PropertyType = typeof({{propertyType}}))]
                public partial {{declaredType}} IsSelected { get; set; }
            }
            """;

        string result = $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyObject<T1, T2, T3, T4>"/>
                partial class MyObject<T1, T2, T3, T4>
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="IsSelected"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty IsSelectedProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "IsSelected",
                        propertyType: typeof({{generatedPropertyType}}),
                        ownerType: typeof(MyObject<T1, T2, T3, T4>),
                        typeMetadata: {{propertyMetadata}});

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial {{declaredType}} IsSelected
                    {
                        get
                        {
                            object? __boxedValue = GetValue(IsSelectedProperty);

                            OnIsSelectedGet(ref __boxedValue);

                            {{declaredType}} __unboxedValue = ({{declaredType}})__boxedValue;

                            OnIsSelectedGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnIsSelectedSet(ref value);

                            object? __boxedValue = value;

                            OnIsSelectedSet(ref __boxedValue);

                            SetValue(IsSelectedProperty, __boxedValue);

                            OnIsSelectedChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="IsSelectedProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="IsSelectedProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedGet(ref {{boxedType}} propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="IsSelectedProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="IsSelectedProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedGet(ref {{declaredType}} propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="IsSelectedProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="IsSelectedProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedSet(ref {{boxedType}} propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="IsSelected"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="IsSelected"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="IsSelected"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedSet(ref {{declaredType}} propertyValue);

                    /// <summary>Executes the logic for when <see cref="IsSelected"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="IsSelected"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedChanged({{declaredType}} newValue);

                    /// <summary>Executes the logic for when <see cref="IsSelected"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="IsSelected"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnIsSelectedPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyObject`4.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_GenericType_String_WithNoCaching()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyObject<T1, T2, T3, T4> : DependencyObject
                where T1 : class
                where T3 : T2, new()
                where T4 : unmanaged
            {
                [GeneratedDependencyProperty]
                public partial string? Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyObject<T1, T2, T3, T4>"/>
                partial class MyObject<T1, T2, T3, T4>
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(string),
                        ownerType: typeof(MyObject<T1, T2, T3, T4>),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyObject`4.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_GenericType_String_WithNoCaching_WithCallback()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyObject<T1, T2, T3, T4> : DependencyObject
                where T1 : class
                where T3 : T2, new()
                where T4 : unmanaged
            {
                [GeneratedDependencyProperty]
                public partial string? Number { get; set; }

                partial void OnNumberPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyObject<T1, T2, T3, T4>"/>
                partial class MyObject<T1, T2, T3, T4>
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(string),
                        ownerType: typeof(MyObject<T1, T2, T3, T4>),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: null,
                            propertyChangedCallback: static (d, e) => ((MyObject<T1, T2, T3, T4>)d).OnNumberPropertyChanged(e)));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyObject`4.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_GenericType_String_WithNoCaching_WithSharedCallback()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyObject<T1, T2, T3, T4> : DependencyObject
                where T1 : class
                where T3 : T2, new()
                where T4 : unmanaged
            {
                [GeneratedDependencyProperty]
                public partial string? Number { get; set; }

                partial void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyObject<T1, T2, T3, T4>"/>
                partial class MyObject<T1, T2, T3, T4>
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(string),
                        ownerType: typeof(MyObject<T1, T2, T3, T4>),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: null,
                            propertyChangedCallback: static (d, e) => ((MyObject<T1, T2, T3, T4>)d).OnPropertyChanged(e)));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyObject`4.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_GenericType_String_WithNoCaching_WithBothCallbacks()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyObject<T1, T2, T3, T4> : DependencyObject
                where T1 : class
                where T3 : T2, new()
                where T4 : unmanaged
            {
                [GeneratedDependencyProperty]
                public partial string? Number { get; set; }

                partial void OnNumberPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }

                partial void OnPropertyChanged(DependencyPropertyChangedEventArgs e)
                {
                }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyObject<T1, T2, T3, T4>"/>
                partial class MyObject<T1, T2, T3, T4>
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(string),
                        ownerType: typeof(MyObject<T1, T2, T3, T4>),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(
                            defaultValue: null,
                            propertyChangedCallback: static (d, e) =>
                            {
                                MyObject<T1, T2, T3, T4> __this = (MyObject<T1, T2, T3, T4>)d;

                                __this.OnNumberPropertyChanged(e);
                                __this.OnPropertyChanged(e);
                            }));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial string? Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            string? __unboxedValue = (string?)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref string? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref string? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(string? newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyObject`4.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_GenericType_T1_ReferenceType_WithNoCaching()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyObject<T1, T2, T3, T4> : DependencyObject
                where T1 : class
                where T3 : T2, new()
                where T4 : unmanaged
            {
                [GeneratedDependencyProperty]
                public partial T1? Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyObject<T1, T2, T3, T4>"/>
                partial class MyObject<T1, T2, T3, T4>
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(T1),
                        ownerType: typeof(MyObject<T1, T2, T3, T4>),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial T1? Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            T1? __unboxedValue = (T1?)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref T1? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref T1? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(T1? newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyObject`4.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_GenericType_T4_ValueType_WithNoCaching()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyObject<T1, T2, T3, T4> : DependencyObject
                where T1 : class
                where T3 : T2, new()
                where T4 : unmanaged
            {
                [GeneratedDependencyProperty]
                public partial T4 Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyObject<T1, T2, T3, T4>"/>
                partial class MyObject<T1, T2, T3, T4>
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(T4),
                        ownerType: typeof(MyObject<T1, T2, T3, T4>),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(default(T4)));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial T4 Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            T4 __unboxedValue = (T4)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref T4 propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref T4 propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(T4 newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyObject`4.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_GenericType_T4_ValueType_Nullable_WithNoCaching()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyObject<T1, T2, T3, T4> : DependencyObject
                where T1 : class
                where T3 : T2, new()
                where T4 : unmanaged
            {
                [GeneratedDependencyProperty]
                public partial T4? Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyObject<T1, T2, T3, T4>"/>
                partial class MyObject<T1, T2, T3, T4>
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(T4?),
                        ownerType: typeof(MyObject<T1, T2, T3, T4>),
                        typeMetadata: null);

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial T4? Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            T4? __unboxedValue = (T4?)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref T4? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref T4? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(T4? newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyObject`4.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_GenericType_T2_Unconstrained_WithNoCaching()
    {
        const string source = """
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyObject<T1, T2, T3, T4> : DependencyObject
                where T1 : class
                where T3 : T2, new()
                where T4 : unmanaged
            {
                [GeneratedDependencyProperty]
                public partial T2? Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyObject<T1, T2, T3, T4>"/>
                partial class MyObject<T1, T2, T3, T4>
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(T2),
                        ownerType: typeof(MyObject<T1, T2, T3, T4>),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(default(T2)));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial T2? Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            T2? __unboxedValue = (T2?)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref T2? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref T2? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(T2? newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyObject`4.g.cs", result), languageVersion: LanguageVersion.Preview);
    }

    [TestMethod]
    public void SingleProperty_GenericType_T2_Unconstrained_WithInterface_WithNoCaching()
    {
        const string source = """
            using System;
            using CommunityToolkit.WinUI;
            using Windows.UI.Xaml;

            #nullable enable

            namespace MyNamespace;

            public partial class MyObject<T1, T2, T3, T4> : DependencyObject
                where T1 : class
                where T2 : IDisposable
                where T3 : T2, new()
                where T4 : unmanaged
            {
                [GeneratedDependencyProperty]
                public partial T2? Number { get; set; }
            }
            """;

        const string result = """
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            namespace MyNamespace
            {
                /// <inheritdoc cref="MyObject<T1, T2, T3, T4>"/>
                partial class MyObject<T1, T2, T3, T4>
                {
                    /// <summary>
                    /// The backing <see cref="global::Windows.UI.Xaml.DependencyProperty"/> instance for <see cref="Number"/>.
                    /// </summary>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    public static readonly global::Windows.UI.Xaml.DependencyProperty NumberProperty = global::Windows.UI.Xaml.DependencyProperty.Register(
                        name: "Number",
                        propertyType: typeof(T2),
                        ownerType: typeof(MyObject<T1, T2, T3, T4>),
                        typeMetadata: new global::Windows.UI.Xaml.PropertyMetadata(default(T2)));

                    /// <inheritdoc/>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    [global::System.Diagnostics.DebuggerNonUserCode]
                    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
                    public partial T2? Number
                    {
                        get
                        {
                            object? __boxedValue = GetValue(NumberProperty);

                            OnNumberGet(ref __boxedValue);

                            T2? __unboxedValue = (T2?)__boxedValue;

                            OnNumberGet(ref __unboxedValue);

                            return __unboxedValue;
                        }
                        set
                        {
                            OnNumberSet(ref value);

                            object? __boxedValue = value;

                            OnNumberSet(ref __boxedValue);

                            SetValue(NumberProperty, __boxedValue);

                            OnNumberChanged(value);
                        }
                    }

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The raw property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="get"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The unboxed property value that has been retrieved from <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the unboxed value retrieved via <see cref="GetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberGet(ref T2? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The boxed property value that has been produced before assigning to <see cref="NumberProperty"/>.</param>
                    /// <remarks>This method is invoked on the boxed value that is about to be passed to <see cref="SetValue"/> on <see cref="NumberProperty"/>.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref object? propertyValue);

                    /// <summary>Executes the logic for when the <see langword="set"/> accessor <see cref="Number"/> is invoked</summary>
                    /// <param name="propertyValue">The property value that is being assigned to <see cref="Number"/>.</param>
                    /// <remarks>This method is invoked on the raw value being assigned to <see cref="Number"/>, before <see cref="SetValue"/> is used.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberSet(ref T2? propertyValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="value">The new property value that has been set.</param>
                    /// <remarks>This method is invoked right after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberChanged(T2? newValue);

                    /// <summary>Executes the logic for when <see cref="Number"/> has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of <see cref="Number"/> is changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnNumberPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);

                    /// <summary>Executes the logic for when any dependency property has just changed.</summary>
                    /// <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
                    /// <remarks>This method is invoked by the <see cref="global::Windows.UI.Xaml.DependencyProperty"/> infrastructure, after the value of any dependency property has just changed.</remarks>
                    [global::System.CodeDom.Compiler.GeneratedCode("CommunityToolkit.WinUI.DependencyPropertyGenerator", <ASSEMBLY_VERSION>)]
                    partial void OnPropertyChanged(global::Windows.UI.Xaml.DependencyPropertyChangedEventArgs e);
                }
            }
            """;

        CSharpGeneratorTest<DependencyPropertyGenerator>.VerifySources(source, ("MyNamespace.MyObject`4.g.cs", result), languageVersion: LanguageVersion.Preview);
    }
}
