// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Collections.Immutable;
using CommunityToolkit.GeneratedDependencyProperty.Constants;
using CommunityToolkit.GeneratedDependencyProperty.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using static CommunityToolkit.GeneratedDependencyProperty.Diagnostics.DiagnosticDescriptors;

namespace CommunityToolkit.GeneratedDependencyProperty;

/// <summary>
/// A diagnostic analyzer that generates an error whenever <c>[GeneratedDependencyProperty]</c> is used on an invalid property declaration.
/// </summary>
[DiagnosticAnalyzer(LanguageNames.CSharp)]
public sealed class InvalidPropertySymbolDeclarationAnalyzer : DiagnosticAnalyzer
{
    /// <inheritdoc/>
    public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get; } =
    [
        InvalidPropertyDeclarationIsNotIncompletePartialDefinition,
        InvalidPropertyDeclarationReturnsByRef,
        InvalidPropertyDeclarationReturnsRefLikeType,
        InvalidPropertyDeclarationReturnsPointerType
    ];

    /// <inheritdoc/>
    public override void Initialize(AnalysisContext context)
    {
        // This generator is intentionally also analyzing generated code, because Roslyn will interpret properties
        // that have '[GeneratedCode]' on them as being generated (and the same will apply to all partial parts).
        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.Analyze | GeneratedCodeAnalysisFlags.ReportDiagnostics);
        context.EnableConcurrentExecution();

        context.RegisterCompilationStartAction(static context =>
        {
            // Get the '[GeneratedDependencyProperty]' symbol (there might be multiples, due to embedded mode)
            ImmutableArray<INamedTypeSymbol> generatedDependencyPropertyAttributeSymbols = context.Compilation.GetTypesByMetadataName(WellKnownTypeNames.GeneratedDependencyPropertyAttribute);

            // Get the '[GeneratedCode]' symbol
            if (context.Compilation.GetTypeByMetadataName("System.CodeDom.Compiler.GeneratedCodeAttribute") is not { } generatedCodeAttributeSymbol)
            {
                return;
            }

            context.RegisterSymbolAction(context =>
            {
                // Ensure that we have some target property to analyze (also skip implementation parts)
                if (context.Symbol is not IPropertySymbol { PartialDefinitionPart: null } propertySymbol)
                {
                    return;
                }

                // If the property is not using '[GeneratedDependencyProperty]', there's nothing to do
                if (!propertySymbol.TryGetAttributeWithAnyType(generatedDependencyPropertyAttributeSymbols, out AttributeData? attributeData))
                {
                    return;
                }

                // Emit an error if the property is not a partial definition with no implementation...
                if (propertySymbol is not { IsPartialDefinition: true, PartialImplementationPart: null })
                {
                    // ...But only if it wasn't actually generated by the [ObservableProperty] generator.
                    bool isImplementationAllowed =
                        propertySymbol is { IsPartialDefinition: true, PartialImplementationPart: IPropertySymbol implementationPartSymbol } &&
                        implementationPartSymbol.TryGetAttributeWithType(generatedCodeAttributeSymbol, out AttributeData? generatedCodeAttributeData) &&
                        generatedCodeAttributeData.TryGetConstructorArgument(0, out string? toolName) &&
                        toolName == DependencyPropertyGenerator.GeneratorName;

                    // Emit the diagnostic only for cases that were not valid generator outputs
                    if (!isImplementationAllowed)
                    {
                        context.ReportDiagnostic(Diagnostic.Create(
                            InvalidPropertyDeclarationIsNotIncompletePartialDefinition,
                            attributeData.GetLocation(),
                            propertySymbol));
                    }
                }

                // Emit an error if the property returns a value by ref
                if (propertySymbol.ReturnsByRef || propertySymbol.ReturnsByRefReadonly)
                {
                    context.ReportDiagnostic(Diagnostic.Create(
                        InvalidPropertyDeclarationReturnsByRef,
                        attributeData.GetLocation(),
                        propertySymbol));
                }
                else if (propertySymbol.Type.IsRefLikeType)
                {
                    // Emit an error if the property type is a ref struct
                    context.ReportDiagnostic(Diagnostic.Create(
                        InvalidPropertyDeclarationReturnsRefLikeType,
                        attributeData.GetLocation(),
                        propertySymbol));
                }
                else if (propertySymbol.Type.TypeKind is TypeKind.Pointer or TypeKind.FunctionPointer)
                {
                    // Emit a diagnostic if the type is a pointer type
                    context.ReportDiagnostic(Diagnostic.Create(
                        InvalidPropertyDeclarationReturnsPointerType,
                        attributeData.GetLocation(),
                        propertySymbol));
                }
            }, SymbolKind.Property);
        });
    }
}
