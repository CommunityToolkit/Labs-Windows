
# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "Build-WinUI-2"
  Build-WinUI-2:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install .NET 6 SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.201'

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Restore Tools from Manifest list in the Repository
      - name: Restore dotnet tools
        run: dotnet tool restore

      - name: Run Uno Check to Install Dependencies
        run: dotnet tool run uno-check --ci --fix --non-interactive --skip wsl --skip androidemulator --verbose

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3

      - name: Enable all TargetFrameworks
        working-directory: ./common/Scripts/
        run: powershell -version 5.1 -command "./UseTargetFrameworks.ps1 all" -ErrorAction Stop

      - name: Generate solution
        run: powershell -version 5.1 -command "./GenerateAllSolution.ps1" -ErrorAction Stop

      - name: MSBuild
      # working-directory: ./
        run: msbuild.exe Toolkit.Labs.All.sln /restore -p:Configuration=Release

      # Build All Packages - TODO: Detect experiments
      - name: pack CanvasLayout
        working-directory: ./labs/CanvasLayout/src
        run: msbuild -t:pack /p:Configuration=Release /p:DebugType=Portable

      # Push Packages to our DevOps Artifacts Feed
      - name: Add source
        run: dotnet nuget add source "https://pkgs.dev.azure.com/dotnet/CommunityToolkit/_packaging/CommunityToolkit-Labs/nuget/v3/index.json" --name LabsFeed --username dummy --password ${{ secrets.DEVOPS_PACKAGE_PUSH_TOKEN }}

      - name: Push packages
        if: ${{github.ref == 'refs/heads/main'}}
        run: dotnet nuget push "**/*.nupkg" --api-key dummy --source LabsFeed --skip-duplicate

      # Run tests
      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1

      - name: Run SourceGenerators tests
        run: vstest.console.exe ./common/CommunityToolkit.Labs.Core.SourceGenerators.Tests/CommunityToolkit.Labs.Core.SourceGenerators.Tests/bin/Release/net6.0/CommunityToolkit.Labs.Core.SourceGenerators.Tests.dll /logger:"trx;LogFileName=SourceGenerators.trx"

      - name: Run experiment tests against UWP
        run:  vstest.console.exe ./tests/**/CommunityToolkit.Labs.UnitTests.UWP.build.appxrecipe /Framework:FrameworkUap10 /logger:"trx;LogFileName=UWP.trx"

      - name: Run experiment tests against WinAppSDK
        run:  vstest.console.exe ./tests/**/CommunityToolkit.Labs.UnitTests.WinAppSdk.build.appxrecipe /Framework:FrameworkUap10 /logger:"trx;LogFileName=WinAppSdk.trx"

      - name: Create test reports
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Test results
          path: './TestResults/*.trx'
          reporter: dotnet-trx

  # This workflow contains a single job called "Build-WinUI-3"
  Build-WinUI-3:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install .NET 6 SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.201'

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Restore Tools from Manifest list in the Repository
      - name: Restore dotnet tools
        run: dotnet tool restore

      - name: Run Uno Check to Install Dependencies
        run: dotnet tool run uno-check --ci --fix --non-interactive --skip wsl --skip androidemulator --verbose

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3

      - name: Enable all TargetFrameworks
        working-directory: ./common/Scripts/
        run: powershell -version 5.1 -command "./UseTargetFrameworks.ps1 all" -ErrorAction Stop

      - name: Generate solution
        run: powershell -version 5.1 -command "./GenerateAllSolution.ps1" -ErrorAction Stop

      - name: Enable WinUI 3
        working-directory: ./common/Scripts/
        run: powershell -version 5.1 -command "./UseUnoWinUI.ps1 3" -ErrorAction Stop

      - name: MSBuild
       # working-directory: ./
        run: msbuild.exe Toolkit.Labs.All.sln /restore -p:Configuration=Release

      # Build All Packages - TODO: Detect experiments
      - name: pack CanvasLayout
        working-directory: ./labs/CanvasLayout/src
        run: msbuild -t:pack /p:Configuration=Release /p:DebugType=Portable

      # Push Packages to our DevOps Artifacts Feed
      - name: Add source
        run: dotnet nuget add source "https://pkgs.dev.azure.com/dotnet/CommunityToolkit/_packaging/CommunityToolkit-Labs/nuget/v3/index.json" --name LabsFeed --username dummy --password ${{ secrets.DEVOPS_PACKAGE_PUSH_TOKEN }}

      - name: Push packages
        if: ${{github.ref == 'refs/heads/main'}}
        run: dotnet nuget push "**/*.nupkg" --api-key dummy --source LabsFeed --skip-duplicate

      # Run tests
      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1

      - name: Run SourceGenerators tests
        run: vstest.console.exe ./common/CommunityToolkit.Labs.Core.SourceGenerators.Tests/CommunityToolkit.Labs.Core.SourceGenerators.Tests/bin/Release/net6.0/CommunityToolkit.Labs.Core.SourceGenerators.Tests.dll /logger:"trx;LogFileName=SourceGenerators.trx"

      - name: Run experiment tests against UWP
        run:  vstest.console.exe ./tests/**/CommunityToolkit.Labs.UnitTests.UWP.build.appxrecipe /Framework:FrameworkUap10 /logger:"trx;LogFileName=UWP.trx"

      - name: Run experiment tests against WinAppSDK
        run:  vstest.console.exe ./tests/**/CommunityToolkit.Labs.UnitTests.WinAppSdk.build.appxrecipe /Framework:FrameworkUap10 /logger:"trx;LogFileName=WinAppSdk.trx"

      - name: Create test reports
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Test results
          path: './TestResults/*.trx'
          reporter: dotnet-trx

  # This workflow contains a single job called "Xaml-Style-Check"
  Xaml-Style-Check:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Needed until XAML Styler updates to .NET 6
      - name: Install .NET Core 3.1 SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Restore Tools from Manifest list in the Repository
      - name: Restore dotnet tools
        run: dotnet tool restore

      - name: Check XAML Styling
        run: powershell -version 5.1 -command "./ApplyXamlStyling.ps1 -Passive" -ErrorAction Stop

  # Test/temp job to build a single experiment to ensure our changes work for both our main types of solutions at the moment
  experiment:
    runs-on: windows-latest

    steps:
      - name: Install .NET 6 SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.201'

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.3

      # Build and use template for creating new experiments
      - name: Build ProjectTemplate
        working-directory: ./template/lab
        run: msbuild.exe ProjectTemplate.sln /restore -p:Configuration=Debug

      # Create a new experiment from the template and test using that
      - name: Install template
        working-directory: ./template/lab
        run: dotnet new --install ./

      - name: Create new experiment
        working-directory: ./labs
        run: dotnet new labexp -n CiTestExp

      - name: MSBuild
        working-directory: ./labs/CiTestExp
        run: msbuild.exe CiTestExp.sln /restore -p:Configuration=Release

      # Run tests
      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1

      - name: Run tests in the generated experiment against UWP
        run:  vstest.console.exe ./labs/CiTestExp/**/CiTestExp.UnitTests.UWP.build.appxrecipe /Framework:FrameworkUap10 /logger:"trx;LogFileName=CiTestExpUWP.trx"

      - name: Run tests in the generated experiment against WinAppSDK
        run:  vstest.console.exe ./labs/CiTestExp/**/CiTestExp.UnitTests.WinAppSdk.build.appxrecipe /Framework:FrameworkUap10 /logger:"trx;LogFileName=CiTestExpWinAppSdk.trx"

      - name: Create test reports
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Test results
          path: './TestResults/*.trx'
          reporter: dotnet-trx
